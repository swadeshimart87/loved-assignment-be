{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","componentDidMount","fetch","symbols","join","then","response","ok","json","data","Error","alert","setState","_data","addToTicker","addTciker","console","log","push","newTicker","event","taget","target","value","state","className","this","filter","Symbol","price","regularMarketPrice","map","currencySymbol","type","id","onChange","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAe,I,YCgFAA,E,kDAzEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,kBAAoB,WAClBC,MAAM,gBAAmB,EAAKC,QAAQC,KAAK,MAAMC,MAAK,SAAAC,GACpD,OAAGA,EAASC,GACHD,EAASE,OAET,CAAC,MAAS,gCAElBH,MAAK,SAAAI,GACHA,EAAKC,MACNC,MAAM,6BAEN,EAAKC,SAAS,CAACC,MAAOJ,QAlBT,EAuBnBK,YAAc,WACT,EAAKC,WACNb,MAAM,gBAAmB,EAAKa,WAAWV,MAAK,SAAAC,GAC5C,OAAGA,EAASC,GACHD,EAASE,QAEhBG,MAAM,6BACN,EAAKG,YAAc,GACZ,CAAC,MAAS,aAElBT,MAAK,SAAAI,GACHA,EAAKC,MACNM,QAAQC,IAAI,8BAEZ,EAAKd,QAAQe,KAAK,EAAKH,WACvB,EAAKd,yBAtCM,EA4CnBkB,UAAY,SAACC,GACX,EAAKL,UAAYK,GAASA,EAAMC,OAASD,EAAME,OAAOC,OA3CtD,EAAKpB,QAAU,CAAC,OAAO,KAAK,OAAO,OAAO,MAAO,QACjD,EAAKqB,MAAQ,CAAEX,MAAO,IACtB,EAAKE,UAAY,GAJA,E,0CAgDnB,WAAU,IAAD,OACL,OACE,qBAAKU,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKA,UAAU,UAAf,SACE,+BAEIC,KAAKvB,QAAQwB,QAAO,SAAAC,GAAM,OAAI,EAAKJ,MAAL,OAAuB,EAAKA,MAAL,MAAoBI,IAAW,EAAKJ,MAAL,MAAoBI,GAAQC,MAAMC,sBAAoBC,KAAI,SAAAH,GAC5I,OAAS,iCAAQA,EAAS,KACb,EAAKJ,MAAL,OAAuB,EAAKA,MAAL,MAAoBI,IAAU,EAAKJ,MAAL,MAAoBI,GAAQC,MAAMG,gBAAmB,MAC3G,EAAKR,MAAL,OAAuB,EAAKA,MAAL,MAAoBI,IAAW,EAAKJ,MAAL,MAAoBI,GAAQC,MAAMC,oBAAuB,kBAFlH,cAOjB,sBAAKL,UAAU,aAAf,UACE,uBAAOQ,KAAK,OAAOC,GAAG,aAAaX,MAAOG,KAAKX,UAAWoB,SAAUT,KAAKP,YACzE,wBAAQiB,QAASV,KAAKZ,YAAtB,uC,GAlEIuB,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1BZ,M","file":"static/js/main.e0d4b418.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.symbols = ['GOOG','FB','BLKB','JKHY','TXN', 'APPL'];\r\n    this.state = { _data: {} };\r\n    this.addTciker = '';\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    fetch('/api?symbols='  + this.symbols.join(',')).then(response => {\r\n      if(response.ok) {\r\n        return response.json();\r\n      } else {\r\n        return {'Error': 'error while fetching data'}\r\n      }\r\n    }).then(data => {\r\n      if(data.Error) {\r\n        alert(\"error while fetching data\");\r\n      } else {\r\n        this.setState({_data: data});\r\n      }      \r\n    });\r\n  }\r\n\r\n  addToTicker = () => {\r\n    if(this.addTciker) {\r\n      fetch('/api?symbols='  + this.addTciker).then(response => {\r\n        if(response.ok) {\r\n          return response.json();\r\n        } else {\r\n          alert(\"error while fetching data\");\r\n          this.addToTicker = '';\r\n          return {'Error': 'Error'};\r\n        }\r\n      }).then(data => {\r\n        if(data.Error) {\r\n          console.log('Error while fetching data');\r\n        } else {\r\n          this.symbols.push(this.addTciker);\r\n          this.componentDidMount();\r\n        }        \r\n      });\r\n    }\r\n  }\r\n\r\n  newTicker = (event) => {\r\n    this.addTciker = event && event.taget && event.target.value;\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <div className=\"marquee\">\r\n              <span>\r\n                {\r\n                  this.symbols.filter(Symbol => this.state['_data'] && this.state['_data'][Symbol] && this.state['_data'][Symbol].price.regularMarketPrice).map(Symbol => {\r\n                    return ( <span>{(Symbol + ':' + \r\n                              ( (this.state['_data'] && this.state['_data'][Symbol] &&this.state['_data'][Symbol].price.currencySymbol) || ' ') + \r\n                              ((this.state['_data'] && this.state['_data'][Symbol] && this.state['_data'][Symbol].price.regularMarketPrice) || 'Fetching Data '))} </span>);\r\n                  })\r\n                }\r\n              </span>\r\n            </div>\r\n            <div className=\"inputField\">\r\n              <input type=\"text\" id=\"inputField\" value={this.addTciker} onChange={this.newTicker}/>\r\n              <button onClick={this.addToTicker}>Add to Ticker</button>\r\n            </div>\r\n          </header>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}